@using KerryShaleFanPage.Shared.Enums
@using KerryShaleFanPage.Shared.Objects
@using System.Globalization
@page "/log"

<PageTitle>Log | Kerry Shale Fan Page</PageTitle>

<h1>Log.</h1>

@if (_logEntries == null)
{
    <p><em>@Translate["Loading..."]</em></p>
}
else
{
    <p>&nbsp;</p>

    <p>@Translate["Current UTC time"]: @_utcNow @Translate["(updates every minute)"]</p>

    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" GridLines="DataGridGridLines.Both"
                Data="@_logEntries" TItem="LogEntryDto" ShowPagingSummary="true" IsLoading=@_isLoading Sort="@ShowLoadingAsync" Page="@ShowLoadingAsync" Group="@ShowLoadingAsync" Filter="@ShowLoadingAsync" 
                SelectionMode="DataGridSelectionMode.Single" PageSizeOptions="@_pageSizeOptions" PageSizeText="@Translate["records per page"]" PagingSummaryFormat="@_pagingSummaryFormat" >
        <Columns>
            <RadzenDataGridColumn TItem="LogEntryDto" TextAlign="TextAlign.Left" Filterable="false" Frozen="true" Property="TimeStamp" Title="@Translate["Timestamp (UTC)"]" Width="180px" MinWidth="180px">
                <Template Context="item">
                    <RadzenText TextStyle="TextStyle.Body2" class="py-2">
                        @((_currentCulture.Equals("de", StringComparison.InvariantCultureIgnoreCase))
                            ? item.TimeStamp.ToUniversalTime().ToString("dd.MM.yyyy HH:mm:ss", CultureInfo.InvariantCulture)
                            : item.TimeStamp.ToUniversalTime().ToString("MM/dd/yyyy hh:mm:ss tt", CultureInfo.InvariantCulture))
                        </RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="LogEntryDto" TextAlign="TextAlign.Center" Filterable="false" Frozen="false" Property="LogLevel" Title="@Translate["Level"]" Width="75px" MinWidth="75px">
                <Template Context="item">
                    <RadzenText TextStyle="TextStyle.Body2" class="py-2" style="@($"background-color: {GetBackColor(item.LogLevel)}; color: {GetFrontColor(item.LogLevel)};")">@item.LogLevel</RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="LogEntryDto" TextAlign="TextAlign.Left" Filterable="false" Frozen="false" Property="Logger" Title="@Translate["Logger"]" Width="300px">
                <Template Context="item">
                    <RadzenRow AlignItems="AlignItems.Stretch" Gap="5px">
                        <RadzenColumn Size=10 class="text-truncate">
                            <RadzenText TextStyle="TextStyle.Body2" class="py-2">@((!string.IsNullOrEmpty(item.Logger)) ? item.Logger : "-")</RadzenText>
                        </RadzenColumn>
                        <RadzenColumn Size=2>
                            @if (!string.IsNullOrEmpty(item.Logger))
                            {
                                <RadzenButton Icon="open_in_new" Size="ButtonSize.ExtraSmall" class="m-1 float-end" Click=@(() => ShowDialogAsync("Logger", item.Logger ?? string.Empty)) />
                            }
                        </RadzenColumn>
                    </RadzenRow>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="LogEntryDto" TextAlign="TextAlign.Left" Filterable="false" Frozen="false" Property="Message" Title="@Translate["Message"]" Width="300px">
                <Template Context="item">
                    <RadzenRow AlignItems="AlignItems.Stretch" Gap="5px">
                        <RadzenColumn Size=10 class="text-truncate">
                            <RadzenText TextStyle="TextStyle.Body2" class="py-2">@((!string.IsNullOrEmpty(item.Message)) ? item.Message : "-")</RadzenText>
                        </RadzenColumn>
                        <RadzenColumn Size=2>
                            @if (!string.IsNullOrEmpty(item.Message))
                            {
                                <RadzenButton Icon="open_in_new" Size="ButtonSize.ExtraSmall" class="m-1 float-end" Click=@(() => ShowDialogAsync(@Translate["Message"], item.Message ?? string.Empty)) />
                            }
                        </RadzenColumn>
                    </RadzenRow>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="LogEntryDto" TextAlign="TextAlign.Left" Filterable="false" Frozen="false" Property="Exception" Title="@Translate["Exception"]" Width="300px">
                <Template Context="item">
                    <RadzenRow AlignItems="AlignItems.Stretch" Gap="5px">
                        <RadzenColumn Size=10 class="text-truncate">
                            <RadzenText TextStyle="TextStyle.Body2" class="py-2">@((!string.IsNullOrEmpty(item.Exception)) ? item.Exception : "-")</RadzenText>
                        </RadzenColumn>
                        <RadzenColumn Size=2>
                            @if (!string.IsNullOrEmpty(item.Exception))
                            {
                                <RadzenButton Icon="open_in_new" Size="ButtonSize.ExtraSmall" class="m-1 float-end" Click=@(() => ShowDialogAsync(Translate["Exception"], item.Exception ?? string.Empty)) />
                            }
                        </RadzenColumn>
                    </RadzenRow>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

    <p>&nbsp;</p>

    <h2>@Translate["Web services quality"].</h2>

    <RadzenCard class="w-100">
        <RadzenChart>
            <RadzenLineSeries Smooth="true" Data="@_logChartSeries?.Where(e => e.LogLevel == LogLevelEnum.Critical)" TItem="ChartDataItem" CategoryProperty="MonthYear" Title="@Translate["Critical count"]" LineType="LineType.Solid" ValueProperty="Count" Stroke="@GetFrontColor(LogLevelEnum.Critical)">
                <RadzenMarkers MarkerType="MarkerType.Circle" />
                <RadzenSeriesDataLabels Visible="false" />
            </RadzenLineSeries>
            <RadzenLineSeries Smooth="true" Data="@_logChartSeries?.Where(e => e.LogLevel == LogLevelEnum.Error)" TItem="ChartDataItem" CategoryProperty="MonthYear" Title="@Translate["Error count"]" LineType="LineType.Solid" ValueProperty="Count" Stroke="@GetFrontColor(LogLevelEnum.Error)">
                <RadzenMarkers MarkerType="MarkerType.Circle" />
                <RadzenSeriesDataLabels Visible="false" />
            </RadzenLineSeries>
            <RadzenLineSeries Smooth="true" Data="@_logChartSeries?.Where(e => e.LogLevel == LogLevelEnum.Warn)" TItem="ChartDataItem" CategoryProperty="MonthYear" Title="@Translate["Warning count"]" LineType="LineType.Solid" ValueProperty="Count" Stroke="@GetFrontColor(LogLevelEnum.Warn)">
                <RadzenMarkers MarkerType="MarkerType.Circle" />
                <RadzenSeriesDataLabels Visible="false" />
            </RadzenLineSeries>
            <RadzenLineSeries Smooth="true" Data="@_logChartSeries?.Where(e => e.LogLevel == LogLevelEnum.Info)" TItem="ChartDataItem" CategoryProperty="MonthYear" Title="@Translate["Info count"]" LineType="LineType.Solid" ValueProperty="Count" Stroke="@GetFrontColor(LogLevelEnum.Info)">
                <RadzenMarkers MarkerType="MarkerType.Circle" />
                <RadzenSeriesDataLabels Visible="false" />
            </RadzenLineSeries>
            <RadzenLineSeries Smooth="true" Data="@_logChartSeries?.Where(e => e.LogLevel == LogLevelEnum.Debug)" TItem="ChartDataItem" CategoryProperty="MonthYear" Title="@Translate["Debug count"]" LineType="LineType.Solid" ValueProperty="Count" Stroke="@GetFrontColor(LogLevelEnum.Debug)">
                <RadzenMarkers MarkerType="MarkerType.Circle" />
                <RadzenSeriesDataLabels Visible="false" />
            </RadzenLineSeries>
            <RadzenLineSeries Smooth="true" Data="@_logChartSeries?.Where(e => e.LogLevel == LogLevelEnum.None)" TItem="ChartDataItem" CategoryProperty="MonthYear" Title="@Translate["None count"]" LineType="LineType.Solid" ValueProperty="Count" Stroke="@GetFrontColor(LogLevelEnum.None)">
                <RadzenMarkers MarkerType="MarkerType.Circle" />
                <RadzenSeriesDataLabels Visible="false" />
            </RadzenLineSeries>
            <RadzenCategoryAxis Padding="20" TickDistance="200" Formatter="@FormatAsMonthYear" />
            <RadzenValueAxis>
                <RadzenGridLines Visible="true" />
                <RadzenAxisTitle Text="@Translate["Count"]" />
            </RadzenValueAxis>
        </RadzenChart>
    </RadzenCard>

    <p>&nbsp;</p>

    <h2>@Translate["Web services information"].</h2>

    <RadzenCard class="rz-my-5 rz-mx-auto" Style="background: rgba(255, 255, 255, 0.5);">
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Normal" class="rz-p-4">
            <RadzenColumn Size="12">
                <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-0 rz-mb-0">@Translate["There are currently two scoped web services active:"]</RadzenText>
                <RadzenText TextStyle="TextStyle.Body2" class="rz-mt-0 rz-my-0">
                    - GeneralBusinessLogicService:
                    @Translate["The GeneralBusinessLogicService is executed in an interval of 15 minutes."]
                    @Translate["The GeneralBusinessLogicService will read and update the current web app settings (including news and gallery), it will send out maintenance notifications (if applicable) and it will delete old log entries regularily after some days."]
                </RadzenText>
                <RadzenText TextStyle="TextStyle.Body2" class="rz-mt-0 rz-my-0">
                    - PodcastBusinessLogicService:
                    @Translate["The PodcastBusinessLogicService is executed in an interval based on the date when the next podcast is awaited."]
                    @Translate["The PodcastBusinessLogicService will crawl for new podcast episodes, will store them in a database and will also send out notifications if there is a new podcast episode available."]
                </RadzenText>
            </RadzenColumn>
        </RadzenStack>
    </RadzenCard>

    <p>&nbsp;</p>

    <h2>@Translate["Website history"].</h2>

    <RadzenCard class="rz-my-5 rz-mx-auto" Style="background: rgba(255, 255, 255, 0.5);">
        <RadzenRow JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Normal" Gap="1rem" class="rz-p-4">
            <RadzenColumn Size="12">
                <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-0 rz-mb-0">@Translate["Last website changes:"]</RadzenText>
                <RadzenText TextStyle="TextStyle.Caption" class="rz-display-flex rz-mt-2 rz-mb-0">
                    - (2023/04/07): Added more general information/content.
                </RadzenText>
                <RadzenText TextStyle="TextStyle.Caption" class="rz-display-flex rz-mt-2 rz-mb-0">
                    - (2023/04/07): Added more translations for the new content.
                </RadzenText>
                <RadzenText TextStyle="TextStyle.Caption" class="rz-display-flex rz-mt-2 rz-mb-0">
                    - (2023/04/05): Blazor app prepared so that it can alternatively run as a Windows service (App hosted in Kestrel instead of IIS).
                </RadzenText>
                <RadzenText TextStyle="TextStyle.Caption" class="rz-display-flex rz-mt-2 rz-mb-0">
                    - (2023/04/05): Added version for publishing.
                </RadzenText>
                <RadzenText TextStyle="TextStyle.Caption" class="rz-display-flex rz-mt-2 rz-mb-0">
                    - (2023/04/05): Added more translations.
                </RadzenText>
            </RadzenColumn>
        </RadzenRow>
    </RadzenCard>
}

{
    "AppSettings": {
        "GeneralWebService": {
            "Enabled": true,
            "SwaggerEnabled": false
        },
        "MobileWebService": {
            "Enabled": true,
            "SwaggerEnabled": false
        },
        "GeneralMaintainance": {
            "Enabled": false,
            "Message": "",
            "MessageScrollEnabled": true
        },
        "MobileMaintainance": {
            "Enabled": false,
            "Message": "",
            "MessageScrollEnabled": true
        },
        "GeneralLogging": {
            "DeleteLogsEnabled": true,
            "DeleteLogsAfterDays": 30
        },
        "LoggingWebpage": {
            "MaximumLogEntriesCount": 10000
        },
        "ContactFormWebpage": {
            "MailAddressesSemikolonSeparated": ""
        },
        "IsitrollingpodAtAcast": {
            "CrawlEnabled": true,
            "CrawlEveryHours": 12,
            "MailNotificationEnabled": true,
            "MailAddressesSemikolonSeparated": "",
            "ImageDownloadUploadEnabled": true
        },
        "IsitrollingpodAtListenNotes": {
            "Backup": true,
            "CrawlEnabled": true,
            "CrawlEveryHours": 12,
            "MailNotificationEnabled": true,
            "MailAddressesSemikolonSeparated": "",
            "ImageDownloadUploadEnabled": true
        },
        "IsitrollingpodAtSpotify": {
            "Backup": true,
            "CrawlEnabled": true,
            "CrawlEveryHours": 12,
            "MailNotificationEnabled": true,
            "MailAddressesSemikolonSeparated": "",
            "ImageDownloadUploadEnabled": true
        },
        "IsitrollingpodAtTwitter": {
            "Backup": false,
            "CrawlEnabled": false,
            "CrawlEveryHours": 12,
            "MailNotificationEnabled": false,
            "MailAddressesSemikolonSeparated": "",
            "ImageDownloadUploadEnabled": false
        }
    },
    "GeneralSettings": {  //Important: If the following both settings are true, you need to provide valid plaintext credentials here, that setting will override the existing encrypted configuration.
        "OverrideCurrentGeneralSettings": false,  // How to override: Firstly, set this flag to true. Fourtly, set this flag back to false when you are done. This is the main switch.
        "OverrideCurrentGeneralSettingsFile": false,  // How to override: Secondly, set this flag to true and then start the whole app. Thirdly, end the whole app and then set this flag back to false.
        "DbUsername": "",
        "DbPassword": "",
        "GoogleRecaptchaSiteKey": "",
        "EMailProviderConfiguration": {
            "GMail": {
                "EMailUsername": "",
                "EMailPassword": ""
            },
            "Gmx": {
                "EMailUsername": "",
                "EMailPassword": ""
            }
        }
    },
    "ConnectionStrings": {
        "Storage": "server=127.0.0.1;database=kerryshalefanpg;uid={username};pwd={password};"
    },
    "AllowedHosts": "*",
    "Logging": {
        "LogLevel": {
            "Default": "Information"
        },
        "NLog": {
            "IncludeScopes": true,
            "RemoveLoggerFactoryFilter": true
        }
    },
    // https://github.com/NLog/NLog.Extensions.Logging/wiki/NLog-configuration-with-appsettings.json
    "NLog": {
        "autoReload": true,
        "throwConfigExceptions": true,
        "internalLogLevel": "Warn",
        "internalLogFile": "Log/internal-nlog.txt",
        "extensions": [
            { "assembly": "NLog.Extensions.Logging" },
            { "assembly": "NLog.Web.AspNetCore" },
            { "assembly": "NLog.Database" }
        ],
        "targets": {
            "async": true,
            "allFile": {
                "type": "File",
                "fileName": "Log/nlog-all-${shortdate}.log",
                "layout": "${longdate}|${uppercase:${level}}|${logger}|${message} ${exception:format=tostring}"
            },
            "allConsole": {
                "type": "LimitingWrapper",
                "interval": "00:00:01",
                "messageLimit": 100,
                "target": {
                    "type": "ColoredConsole",
                    "layout": "${longdate}|${event-properties:item=EventId_Id:whenEmpty=0}|${uppercase:${level}}|${logger}|${message} ${exception:format=tostring}|${callsite}",
                    "rowHighlightingRules": [
                        {
                            "condition": "level == LogLevel.Error",
                            "foregroundColor": "Red"
                        },
                        {
                            "condition": "level == LogLevel.Fatal",
                            "foregroundColor": "Red",
                            "backgroundColor": "White"
                        }
                    ],
                    "wordHighlightingRules": [
                        {
                            "regex": "on|off",
                            "foregroundColor": "DarkGreen"
                        },
                        {
                            "condition": "level == LogLevel.Debug",
                            "text": "[TEST]",
                            "foregroundColor": "Blue"
                        }
                    ]
                }
            },
            "allDatabase": {
                "type": "Database",
                "keepConnection": false,
                "dbProvider": "MySql.Data.MySqlClient.MySqlConnection, MySql.Data",
                "connectionString": "server=127.0.0.1;database=kerryshalefanpg;uid={username};pwd={password};",
                "commandText": "INSERT INTO logentries (Created,CreatedBy,Modified,ModifiedBy,TimeStamp,LogLevel,Logger,Message,Exception) VALUES (@Created,@CreatedBy,@Modified,@ModifiedBy,@TimeStamp,@LogLevel,@Logger,@Message,@Exception)",
                "parameters": [
                    {
                        "name": "@Created",
                        "layout": "${date}"
                    },
                    {
                        "name": "@CreatedBy",
                        "layout": "NLog"
                    },
                    {
                        "name": "@Modified",
                        "layout": "${date}"
                    },
                    {
                        "name": "@ModifiedBy",
                        "layout": "NLog"
                    },
                    {
                        "name": "@TimeStamp",
                        "layout": "${date}"
                    },
                    {
                        "name": "@LogLevel",
                        "layout": "${level}"
                    },
                    {
                        "name": "@Logger",
                        "layout": "${logger:truncate=255}"
                    },
                    {
                        "name": "@Message",
                        "layout": "${message:truncate=1024}"
                    },
                    {
                        "name": "@Exception",
                        "layout": "${exception:tostring:truncate=1024}"
                    }
                ]
            }
        },
        "rules": [
            {
                "logger": "Microsoft.*",
                "maxLevel": "Info",
                "final": true
            },
            {
                "logger": "*",
                "minLevel": "Info",
                "writeTo": "allFile"
            },
            {
                "logger": "*",
                "minLevel": "Info",
                "writeTo": "allConsole",
                "filterDefaultAction": "Log",
                "filters": {
                    "whenRepeated": {
                        "layout": "${message}",
                        "action": "Ignore"
                    }
                }
            },
            {
                "logger": "*",
                "minLevel": "Info",
                "writeTo": "allDatabase"
            }
        ]
    }
}
